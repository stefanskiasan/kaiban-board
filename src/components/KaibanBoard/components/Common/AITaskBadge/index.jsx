/* eslint-disable react/prop-types */
import React from 'react';
import { SparklesIcon, CpuChipIcon, ArrowPathIcon } from '@heroicons/react/24/outline';

/**
 * AI Task Badge Component
 * Displays various AI-related indicators for tasks
 */
const AITaskBadge = ({ 
  isAISelected = false, 
  isGenerated = false, 
  adaptationLevel = 'none',
  size = 'sm' 
}) => {
  const badges = [];
  
  // AI Selected Badge
  if (isAISelected) {
    badges.push({
      key: 'selected',
      icon: SparklesIcon,
      text: 'AI Selected',
      shortText: 'AI',
      color: 'kb-text-indigo-400 kb-bg-indigo-400/10 kb-border-indigo-400/20',
      tooltip: 'This task was selected by AI orchestration'
    });
  }
  
  // AI Generated Badge
  if (isGenerated) {
    badges.push({
      key: 'generated',
      icon: CpuChipIcon,
      text: 'AI Generated',
      shortText: 'Gen',
      color: 'kb-text-green-400 kb-bg-green-400/10 kb-border-green-400/20',
      tooltip: 'This task was generated by AI orchestration'
    });
  }
  
  // Adaptation Level Badge
  if (adaptationLevel && adaptationLevel !== 'none') {
    const adaptationConfig = {
      minor: {
        text: 'Minor Adaptation',
        shortText: 'Adapted',
        color: 'kb-text-yellow-400 kb-bg-yellow-400/10 kb-border-yellow-400/20',
        intensity: 'ðŸ”„'
      },
      moderate: {
        text: 'Moderate Adaptation',
        shortText: 'Adapted',
        color: 'kb-text-orange-400 kb-bg-orange-400/10 kb-border-orange-400/20',
        intensity: 'ðŸ”„ðŸ”„'
      },
      major: {
        text: 'Major Adaptation',
        shortText: 'Adapted',
        color: 'kb-text-red-400 kb-bg-red-400/10 kb-border-red-400/20',
        intensity: 'ðŸ”„ðŸ”„ðŸ”„'
      }
    };
    
    const config = adaptationConfig[adaptationLevel];
    if (config) {
      badges.push({
        key: 'adaptation',
        icon: ArrowPathIcon,
        text: config.text,
        shortText: config.shortText,
        color: config.color,
        intensity: config.intensity,
        tooltip: `Task was adapted by AI orchestration (${adaptationLevel} level)`
      });
    }
  }
  
  // If no AI indicators, return null
  if (badges.length === 0) {
    return null;
  }
  
  const getSizeClasses = () => {
    switch (size) {
      case 'xs':
        return 'kb-text-xs kb-px-1 kb-py-0.5 kb-gap-1';
      case 'sm':
        return 'kb-text-xs kb-px-1.5 kb-py-0.5 kb-gap-1';
      case 'md':
        return 'kb-text-sm kb-px-2 kb-py-1 kb-gap-1.5';
      default:
        return 'kb-text-xs kb-px-1.5 kb-py-0.5 kb-gap-1';
    }
  };
  
  const getIconSize = () => {
    switch (size) {
      case 'xs':
        return 'kb-w-3 kb-h-3';
      case 'sm':
        return 'kb-w-3 kb-h-3';
      case 'md':
        return 'kb-w-4 kb-h-4';
      default:
        return 'kb-w-3 kb-h-3';
    }
  };
  
  return (
    <div className="kb-flex kb-flex-wrap kb-gap-1">
      {badges.map(badge => {
        const Icon = badge.icon;
        return (
          <div
            key={badge.key}
            className={`kb-inline-flex kb-items-center kb-rounded-full kb-font-medium kb-border ${badge.color} ${getSizeClasses()}`}
            title={badge.tooltip}
          >
            {badge.intensity ? (
              <span className="kb-mr-1">{badge.intensity}</span>
            ) : (
              <Icon className={getIconSize()} />
            )}
            <span className={size === 'xs' ? 'kb-hidden sm:kb-inline' : 'kb-hidden md:kb-inline'}>
              {badge.text}
            </span>
            <span className={size === 'xs' ? 'kb-inline sm:kb-hidden' : 'kb-inline md:kb-hidden'}>
              {badge.shortText}
            </span>
          </div>
        );
      })}
    </div>
  );
};

export default AITaskBadge;